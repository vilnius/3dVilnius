<?xml version="1.0" encoding="UTF-8"?><!-- Copyright @ 2019 Esri. All rights reserved under the copyright laws of the United States and applicable international laws, treaties, and conventions. --><snippets><snippet name="pointExtrudeFS"><![CDATA[
#ifdef GL_ES
precision mediump float;
#endif
uniform float mp;uniform vec3 im;uniform vec4 ls;uniform vec4 ii;uniform vec4 ie;uniform vec3 camPos;varying vec4 gg;varying vec3 gc;varying vec3 cg;const vec3 a=vec3(1.0,1.0,1.0);const vec3 b=vec3(1.0,1.0,1.0);const vec3 c=vec3(0.2,0.2,0.2);void main(){vec3 d=normalize(cg-camPos);vec3 e=normalize(gc);vec3 f=normalize(reflect(d,e));float g=max(dot(f,im),.001);vec3 h=c*ie.rgb*ie.w*pow(g,18.0);vec3 i=a*ii.rgb*ii.w*clamp(dot(e,im),.0,1.0);vec3 j=b*ls.rgb*ls.w;vec3 k=vec3(j+i+h);gl_FragColor.xyz=gg.xyz*k;float l=mp*0.01;gl_FragColor.w=l;}]]></snippet><snippet name="pointExtrudeVS"><![CDATA[attribute vec3 $position;attribute vec3 $auxpos1;attribute vec3 $normal;attribute vec3 $auxpos2;uniform mat4 el;uniform mat4 viewMat;uniform sampler2D pl;uniform sampler2D ms;uniform float lm;uniform vec3 lo;uniform vec3 origin;uniform vec3 camPos;uniform sampler2D li;uniform vec3 is;uniform float oe;uniform float lp;uniform vec2 il;uniform vec2 ss;uniform bool op;uniform float ei;uniform vec4 em;varying vec4 gg;varying vec3 gc;varying vec3 cg; $linearInterpolator  $lonlat2position  $translationMat  $localTrans  $quintEaseOut const float a=1.0;const float b=0.0;vec4 matchPixelCenter(vec4 c,vec2 d){vec2 e=vec2(.500123)+.5*c.xy/c.w;vec2 f=floor(e*d);vec2 g=vec2(1.0)/d;vec2 h=(((vec2(.5)+f)*g)*2.0-vec2(1.0))*c.w;return vec4(h.x,h.y,c.z,c.w);}void main(void){float i=fract($auxpos2.x/il.x);float j=floor($auxpos2.x/il.y)/il.y;float k=(texture2D(pl,vec2(i,j))).r;float l=(texture2D(ms,vec2(i,j))).r;float m=mod(oe,lm);float n=getQuintEaseInOutValue(m,k,l,lm);if(op){n=l;}float o=getLinearValue(ss,n);float p=$auxpos2.y*lp*2.0*PI;vec3 q=vec3(lo.x*cos(p),lo.x*sin(p),0.0);bool r=false;if($auxpos2.z==a){r=true;}else if($auxpos2.z==b){r=false;}vec3 s=lo.x*$position+$auxpos1;vec3 t=(viewMat*vec4($auxpos1,1.0)).xyz;vec3 u;mat4 v=mat4(1.0);
#ifdef GLOBAL
u=normalize(s+origin);
#else
u=vec3(0.0,0.0,1.0);
#endif
vec3 w=(viewMat*vec4(s,1.0)).xyz;gc=normalize(w-t);if(r){gg=texture2D(li,vec2(o,0.5));s+=(u*getScope(lo.yz,o));}else{gg=vec4(is,1.0);}vec3 x=vec3(1.0,0.0,0.0);float y=1.0;float z=1.0;float A=abs(dot(u,normalize(camPos-s)));float B=0.00001;w=(viewMat*vec4(s,1.0)).xyz;if(A>.01){float C=sqrt(1.0-A*A)/A;float D=(1.0-C/em[2]);if(z>0.0){w*=D;}else{w/=D;}}w+=x;vec4 E=el*vec4(w,1.0);E.z-=z*B*E.w;gl_Position=matchPixelCenter(E,em.zw);gc=normalize(u+gc*0.5);cg=w;}]]></snippet></snippets>